
ece295_I2C_tutorial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d42  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099b  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000576  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056d  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ec  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8c:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <I2Cinit>:
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  9a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  9e:	84 e0       	ldi	r24, 0x04	; 4
  a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a4:	08 95       	ret

000000a6 <I2Cstart>:
  a6:	84 ea       	ldi	r24, 0xA4	; 164
  a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	88 23       	and	r24, r24
  b2:	e4 f7       	brge	.-8      	; 0xac <I2Cstart+0x6>
  b4:	08 95       	ret

000000b6 <I2Cstop>:
  b6:	84 e9       	ldi	r24, 0x94	; 148
  b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	08 95       	ret

000000be <I2Cwrite>:
  be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <I2Cwrite+0xa>
  d0:	08 95       	ret

000000d2 <I2Csendcmd>:
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	d8 2f       	mov	r29, r24
  d8:	c6 2f       	mov	r28, r22
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <I2Cstart>
  de:	8d 2f       	mov	r24, r29
  e0:	0e 94 5f 00 	call	0xbe	; 0xbe <I2Cwrite>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 5f 00 	call	0xbe	; 0xbe <I2Cwrite>
  ea:	8c 2f       	mov	r24, r28
  ec:	0e 94 5f 00 	call	0xbe	; 0xbe <I2Cwrite>
  f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <I2Cstop>
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <I2Csenddatum>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	d8 2f       	mov	r29, r24
 100:	c6 2f       	mov	r28, r22
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <I2Cstart>
 106:	8d 2f       	mov	r24, r29
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <I2Cwrite>
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <I2Cwrite>
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 5f 00 	call	0xbe	; 0xbe <I2Cwrite>
 118:	0e 94 5b 00 	call	0xb6	; 0xb6 <I2Cstop>
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <screen_write_string>:
{
	// TODO: Initialize screen
 }

void screen_write_string(char string_to_write[])
{
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	7c 01       	movw	r14, r24
	int letter=0;
	
	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	88 e7       	ldi	r24, 0x78	; 120
 138:	0e 94 69 00 	call	0xd2	; 0xd2 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_SET_CURSOR_LINE_1);
 13c:	60 e8       	ldi	r22, 0x80	; 128
 13e:	88 e7       	ldi	r24, 0x78	; 120
 140:	0e 94 69 00 	call	0xd2	; 0xd2 <I2Csendcmd>
	int current_line = COMMAND_SET_CURSOR_LINE_1;
 144:	68 94       	set
 146:	cc 24       	eor	r12, r12
 148:	c7 f8       	bld	r12, 7
 14a:	d1 2c       	mov	r13, r1
	// TODO: Initialize screen
 }

void screen_write_string(char string_to_write[])
{
	int letter=0;
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	
	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
	I2Csendcmd(SCREEN_ADDR, COMMAND_SET_CURSOR_LINE_1);
	int current_line = COMMAND_SET_CURSOR_LINE_1;
	
	while(string_to_write[letter]!='\0')
 150:	23 c0       	rjmp	.+70     	; 0x198 <screen_write_string+0x76>
	{
		if ((letter != 0) && (letter % LINE_LENGTH == 0))
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	d9 f0       	breq	.+54     	; 0x18c <screen_write_string+0x6a>
 156:	ce 01       	movw	r24, r28
 158:	6a e0       	ldi	r22, 0x0A	; 10
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	0e 94 09 01 	call	0x212	; 0x212 <__divmodhi4>
 160:	89 2b       	or	r24, r25
 162:	a1 f4       	brne	.+40     	; 0x18c <screen_write_string+0x6a>
		{
			if (current_line == COMMAND_SET_CURSOR_LINE_4){
 164:	80 ee       	ldi	r24, 0xE0	; 224
 166:	c8 16       	cp	r12, r24
 168:	d1 04       	cpc	r13, r1
 16a:	49 f4       	brne	.+18     	; 0x17e <screen_write_string+0x5c>
				current_line = COMMAND_SET_CURSOR_LINE_1;// We've gone past the end of the line, go to the next one
				I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	88 e7       	ldi	r24, 0x78	; 120
 170:	0e 94 69 00 	call	0xd2	; 0xd2 <I2Csendcmd>
	while(string_to_write[letter]!='\0')
	{
		if ((letter != 0) && (letter % LINE_LENGTH == 0))
		{
			if (current_line == COMMAND_SET_CURSOR_LINE_4){
				current_line = COMMAND_SET_CURSOR_LINE_1;// We've gone past the end of the line, go to the next one
 174:	68 94       	set
 176:	cc 24       	eor	r12, r12
 178:	c7 f8       	bld	r12, 7
 17a:	d1 2c       	mov	r13, r1
 17c:	03 c0       	rjmp	.+6      	; 0x184 <screen_write_string+0x62>
				I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
			}
			else
			current_line = current_line+0x20;
 17e:	e0 e2       	ldi	r30, 0x20	; 32
 180:	ce 0e       	add	r12, r30
 182:	d1 1c       	adc	r13, r1
			I2Csendcmd(SCREEN_ADDR, current_line); // We've gone past the end of the line, go to the next one
 184:	6c 2d       	mov	r22, r12
 186:	88 e7       	ldi	r24, 0x78	; 120
 188:	0e 94 69 00 	call	0xd2	; 0xd2 <I2Csendcmd>
		}
		
		I2Csenddatum(SCREEN_ADDR, string_to_write[letter]);
 18c:	f8 01       	movw	r30, r16
 18e:	60 81       	ld	r22, Z
 190:	88 e7       	ldi	r24, 0x78	; 120
 192:	0e 94 7d 00 	call	0xfa	; 0xfa <I2Csenddatum>
		letter++;
 196:	21 96       	adiw	r28, 0x01	; 1
	
	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
	I2Csendcmd(SCREEN_ADDR, COMMAND_SET_CURSOR_LINE_1);
	int current_line = COMMAND_SET_CURSOR_LINE_1;
	
	while(string_to_write[letter]!='\0')
 198:	87 01       	movw	r16, r14
 19a:	0c 0f       	add	r16, r28
 19c:	1d 1f       	adc	r17, r29
 19e:	f8 01       	movw	r30, r16
 1a0:	80 81       	ld	r24, Z
 1a2:	81 11       	cpse	r24, r1
 1a4:	d6 cf       	rjmp	.-84     	; 0x152 <screen_write_string+0x30>
		}
		
		I2Csenddatum(SCREEN_ADDR, string_to_write[letter]);
		letter++;
	}
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	08 95       	ret

000001b8 <main>:


int main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	a8 97       	sbiw	r28, 0x28	; 40
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xff; //PortD as output (only need PD6 for display)
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	8f e0       	ldi	r24, 0x0F	; 15
 1d2:	97 e2       	ldi	r25, 0x27	; 39
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x1c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x22>
 1da:	00 00       	nop
	const int STR_LEN = 40;
	const float VREF = 3.3; // Measure this with a voltmeter
	volatile char string_to_write[STR_LEN];
	
	_delay_ms(5);
	PORTD = PORTD | (0<<PD6); // turn off
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	9f ef       	ldi	r25, 0xFF	; 255
 1e2:	21 ee       	ldi	r18, 0xE1	; 225
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	91 50       	subi	r25, 0x01	; 1
 1e8:	20 40       	sbci	r18, 0x00	; 0
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x2e>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x38>
 1f0:	00 00       	nop
	_delay_ms(200);
	PORTD = PORTD | (1<<PD6); // turn on display
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	8f e0       	ldi	r24, 0x0F	; 15
 1fa:	97 e2       	ldi	r25, 0x27	; 39
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x44>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x4a>
 202:	00 00       	nop
	_delay_ms(5);
	
	//Set up I2C
	I2Cinit();
 204:	0e 94 4a 00 	call	0x94	; 0x94 <I2Cinit>
	//Initialize ADC
	ADC_Init();
		
	while (1)
	{
		screen_write_string(string_to_write);				
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 91 00 	call	0x122	; 0x122 <screen_write_string>
 210:	fb cf       	rjmp	.-10     	; 0x208 <main+0x50>

00000212 <__divmodhi4>:
 212:	97 fb       	bst	r25, 7
 214:	07 2e       	mov	r0, r23
 216:	16 f4       	brtc	.+4      	; 0x21c <__divmodhi4+0xa>
 218:	00 94       	com	r0
 21a:	07 d0       	rcall	.+14     	; 0x22a <__divmodhi4_neg1>
 21c:	77 fd       	sbrc	r23, 7
 21e:	09 d0       	rcall	.+18     	; 0x232 <__divmodhi4_neg2>
 220:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodhi4>
 224:	07 fc       	sbrc	r0, 7
 226:	05 d0       	rcall	.+10     	; 0x232 <__divmodhi4_neg2>
 228:	3e f4       	brtc	.+14     	; 0x238 <__divmodhi4_exit>

0000022a <__divmodhi4_neg1>:
 22a:	90 95       	com	r25
 22c:	81 95       	neg	r24
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	08 95       	ret

00000232 <__divmodhi4_neg2>:
 232:	70 95       	com	r23
 234:	61 95       	neg	r22
 236:	7f 4f       	sbci	r23, 0xFF	; 255

00000238 <__divmodhi4_exit>:
 238:	08 95       	ret

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
